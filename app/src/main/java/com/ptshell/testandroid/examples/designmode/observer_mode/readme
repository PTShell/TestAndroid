1.定义
定义对象间的一种一个对多的依赖关系，当一个对象的状态发送改变时，所以依赖于它的对象都得到通知并被自动更新。

2.介绍
观察者属于行为型模式。
观察者模式又被称作发布/订阅模式。
观察者模式主要用来解耦，将被观察者和观察者解耦，让他们之间没有没有依赖或者依赖关系很小。

角色说明：
Subject（抽象主题）：又叫抽象被观察者，把所有观察者对象的引用保存到一个集合里，每个主题都可以有任何数量的观察者。
抽象主题提供一个接口，可以增加和删除观察者对象。
ConcreteSubject（具体主题）：又叫具体被观察者，将有关状态存入具体观察者对象；在具体主题内部状态改变时，
给所有登记过的观察者发出通知。
Observer (抽象观察者):为所有的具体观察者定义一个接口，在得到主题通知时更新自己。
ConcrereObserver（具体观察者）：实现抽象观察者定义的更新接口，当得到主题更改通知时更新自身的状态。

优点
解除观察者与主题之间的耦合。让耦合的双方都依赖于抽象，而不是依赖具体。从而使得各自的变化都不会影响另一边的变化。
易于扩展，对同一主题新增观察者时无需修改原有代码。
 缺点
依赖关系并未完全解除，抽象主题仍然依赖抽象观察者。
使用观察者模式时需要考虑一下开发效率和运行效率的问题，程序中包括一个被观察者、多个观察者，开发、调试等内容会比较复杂，
而且在Java中消息的通知一般是顺序执行，那么一个观察者卡顿，会影响整体的执行效率，在这种情况下，一般会采用异步实现。
可能会引起多余的数据通知。

链接：https://www.jianshu.com/p/8f32da74cd8b